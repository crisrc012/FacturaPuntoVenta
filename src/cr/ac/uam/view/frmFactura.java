/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package cr.ac.uam.view;

import cr.ac.uam.bl.Inventario;
import cr.ac.uam.domain.Cliente;
import cr.ac.uam.domain.Factura;
import cr.ac.uam.domain.Producto;
import java.awt.HeadlessException;
import java.util.Date;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author crobles
 */
public class frmFactura extends javax.swing.JFrame {

    // JFrames
    private static frmClientes frmclientes = null;
    private static frmInventario frminventario = null;
    private static frmFacturas frmfacturas = null;

    // Variables globales
    public static Cliente clienteActual = null;
    public static Producto productoActual = null;
    private static Inventario Productos = null;

    /**
     * Creates new form Frame
     */
    public frmFactura() {
        initComponents();
        Productos = new Inventario(true);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jBtnSeleccionarCliente = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTableFactura = new javax.swing.JTable();
        jBtnAgregarProducto = new javax.swing.JButton();
        jBtnQuitarProducto = new javax.swing.JButton();
        jBtnFacturar = new javax.swing.JButton();
        jLabelTotal = new javax.swing.JLabel();
        jLabelTotalValue = new javax.swing.JLabel();
        jLabelCedCliente = new javax.swing.JLabel();
        jLabelNombreCliente = new javax.swing.JLabel();
        jLabelCedValue = new javax.swing.JLabel();
        jLabelNomValue = new javax.swing.JLabel();
        jBtnEdit = new javax.swing.JButton();
        jLabelProductos = new javax.swing.JLabel();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        jMenuItemImprimir = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jBtnSeleccionarCliente.setText("Clientes");
        jBtnSeleccionarCliente.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBtnSeleccionarClienteActionPerformed(evt);
            }
        });

        jTableFactura.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Código", "Descripción", "Precio Unitario", "Cantidad"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class, java.lang.Double.class, java.lang.Integer.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(jTableFactura);
        jTableFactura.getColumnModel().getSelectionModel().setSelectionMode(javax.swing.ListSelectionModel.SINGLE_INTERVAL_SELECTION);

        jBtnAgregarProducto.setText("Agregar");
        jBtnAgregarProducto.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBtnAgregarProductoActionPerformed(evt);
            }
        });

        jBtnQuitarProducto.setText("Quitar");
        jBtnQuitarProducto.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBtnQuitarProductoActionPerformed(evt);
            }
        });

        jBtnFacturar.setText("Facturar");
        jBtnFacturar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBtnFacturarActionPerformed(evt);
            }
        });

        jLabelTotal.setFont(new java.awt.Font("Cantarell", 1, 15)); // NOI18N
        jLabelTotal.setText("Total:");

        jLabelTotalValue.setText("0");
        jLabelTotalValue.setHorizontalTextPosition(javax.swing.SwingConstants.RIGHT);

        jLabelCedCliente.setFont(new java.awt.Font("Cantarell", 1, 15)); // NOI18N
        jLabelCedCliente.setText("Cédula:");

        jLabelNombreCliente.setFont(new java.awt.Font("Cantarell", 1, 15)); // NOI18N
        jLabelNombreCliente.setText("Nombre:");

        jLabelCedValue.setText("-");

        jLabelNomValue.setText("-");

        jBtnEdit.setIcon(new javax.swing.ImageIcon(getClass().getResource("/cr/ac/uam/view/edit.png"))); // NOI18N
        jBtnEdit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBtnEditActionPerformed(evt);
            }
        });

        jLabelProductos.setText("Productos:");

        jMenu1.setText("Archivo");

        jMenuItemImprimir.setText("Imprimir factura a PDF");
        jMenuItemImprimir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemImprimirActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItemImprimir);

        jMenuBar1.add(jMenu1);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                        .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                            .addComponent(jLabelTotal)
                            .addGap(18, 18, 18)
                            .addComponent(jLabelTotalValue, javax.swing.GroupLayout.PREFERRED_SIZE, 406, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGroup(layout.createSequentialGroup()
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                .addGroup(layout.createSequentialGroup()
                                    .addComponent(jLabelCedCliente)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(jLabelCedValue)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jBtnSeleccionarCliente))
                                .addGroup(layout.createSequentialGroup()
                                    .addGap(0, 0, Short.MAX_VALUE)
                                    .addComponent(jLabelProductos)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(jBtnAgregarProducto)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(jBtnQuitarProducto)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(jBtnEdit, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGap(19, 19, 19)))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabelNombreCliente)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabelNomValue))
                            .addComponent(jBtnFacturar)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 505, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addContainerGap())))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabelCedCliente)
                    .addComponent(jLabelCedValue)
                    .addComponent(jBtnSeleccionarCliente))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabelNombreCliente)
                    .addComponent(jLabelNomValue))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jBtnAgregarProducto)
                        .addComponent(jBtnQuitarProducto)
                        .addComponent(jLabelProductos))
                    .addComponent(jBtnEdit, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 253, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabelTotal)
                    .addComponent(jLabelTotalValue))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jBtnFacturar)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jBtnSeleccionarClienteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBtnSeleccionarClienteActionPerformed
        selectCliente();
    }//GEN-LAST:event_jBtnSeleccionarClienteActionPerformed

    private void selectCliente() {
        if (frmclientes == null) {
            frmclientes = new frmClientes();
            frmclientes.setVisible(true);
        } else if (!frmclientes.isVisible()) {
            frmclientes.setVisible(true);
        }
        frmclientes.toFront();
    }

    private void clear() {
        jLabelCedValue.setText("-");
        jLabelNomValue.setText("-");
        jLabelTotalValue.setText("0");
        DefaultTableModel model = (DefaultTableModel) jTableFactura.getModel();
        model.getDataVector().removeAllElements();
        model.fireTableDataChanged();
        clienteActual = null;
        productoActual = null;
    }

    private void jBtnAgregarProductoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBtnAgregarProductoActionPerformed
        addProducto();
    }//GEN-LAST:event_jBtnAgregarProductoActionPerformed

    private void addProducto() {
        if (frminventario == null) {
            frminventario = new frmInventario();
            frminventario.setVisible(true);
        } else if (!frminventario.isVisible()) {
            frminventario.setVisible(true);
        }
        frminventario.toFront();
    }

    private void jBtnQuitarProductoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBtnQuitarProductoActionPerformed
        if (jTableFactura.getModel().getRowCount() == 0) {
            JOptionPane.showMessageDialog(rootPane,
                    "No existen productos para quitar",
                    "Atención",
                    JOptionPane.ERROR_MESSAGE);
            return;
        }
        if (jTableFactura.getSelectedRowCount() != 1) {
            if (jTableFactura.getSelectedRowCount() <= 0) {
                JOptionPane.showMessageDialog(null,
                        "Por favor seleccionar al menos un producto",
                        "Atención",
                        JOptionPane.ERROR_MESSAGE);
                return;
            }
            if (jTableFactura.getSelectedRowCount() > 1) {
                JOptionPane.showMessageDialog(null,
                        "Por favor seleccionar al unicamente un producto",
                        "Atención",
                        JOptionPane.ERROR_MESSAGE);
            }
        } else {
            int id = Integer.parseInt(String.valueOf(jTableFactura.getValueAt(
                    jTableFactura.getSelectedRow(), 0)));
            long cantidad = Long.parseLong(String.valueOf(jTableFactura.getValueAt(
                    jTableFactura.getSelectedRow(), 3)));
            if (frminventario == null) {
                frminventario = new frmInventario();
            }
            long cantidadTotal = cantidad + frminventario.getInventario().getInventario().get(id - 1).getCantidad();
            frminventario.getInventario().getInventario().get(id - 1).setCantidad(cantidadTotal);
            frminventario.updateJTabel();
            Productos.removeProducto(id);
            setTotal();
            DefaultTableModel model = (DefaultTableModel) jTableFactura.getModel();
            model.removeRow(jTableFactura.getSelectedRow());
        }
    }//GEN-LAST:event_jBtnQuitarProductoActionPerformed

    private void jBtnEditActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBtnEditActionPerformed
        if (jTableFactura.getModel().getRowCount() == 0) {
            JOptionPane.showMessageDialog(rootPane,
                    "Por favor agregue un producto",
                    "Atención",
                    JOptionPane.ERROR_MESSAGE);
            addProducto();
            return;
        }
        if (jTableFactura.getSelectedRowCount() != 1) {
            if (jTableFactura.getSelectedRowCount() <= 0) {
                JOptionPane.showMessageDialog(rootPane,
                        "Por favor seleccionar un producto",
                        "Atención",
                        JOptionPane.ERROR_MESSAGE);
                return;
            }
            if (jTableFactura.getSelectedRowCount() > 1) {
                JOptionPane.showMessageDialog(rootPane,
                        "Por favor seleccionar al unicamente un producto",
                        "Atención",
                        JOptionPane.ERROR_MESSAGE);
            }
        } else {
            try {
                long cantidad = Long.valueOf(JOptionPane.showInputDialog(rootPane, "Digite la cantidad de productos:", "Editar cantidad", JOptionPane.INFORMATION_MESSAGE));
                if (cantidad < 1) {
                    JOptionPane.showMessageDialog(rootPane,
                            "Por favor digite un número entero positivo",
                            "Error",
                            JOptionPane.ERROR_MESSAGE);
                } else {
                    int id = Integer.parseInt(
                            String.valueOf(
                                    jTableFactura.getValueAt(
                                            jTableFactura.getSelectedRow(), 0)));
                    long cantidadJtable = Long.parseLong(
                            String.valueOf(
                                    jTableFactura.getValueAt(
                                            jTableFactura.getSelectedRow(), 3)));
                    long cantidadActual = frminventario.getInventario().getInventario().get(id - 1).getCantidad();
                    cantidad = cantidad - cantidadJtable;
                    cantidadActual = cantidadActual - cantidad;
                    if (cantidadActual >= 0) {
                        Productos.editProducto(id, cantidad + cantidadJtable);
                        frminventario.getInventario().getInventario().get(id - 1).setCantidad(cantidadActual);
                        frminventario.updateJTabel();
                        setTotal();
                        updateJTable();
                    } else {
                        JOptionPane.showMessageDialog(rootPane,
                                "No existe tanto producto en inventario",
                                "Error",
                                JOptionPane.ERROR_MESSAGE);
                    }
                }
            } catch (HeadlessException | NumberFormatException ex) {
                JOptionPane.showMessageDialog(rootPane,
                        "Por favor digite un número",
                        "Atención",
                        JOptionPane.ERROR_MESSAGE);
            }
        }
    }//GEN-LAST:event_jBtnEditActionPerformed

    private void jBtnFacturarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBtnFacturarActionPerformed
        if (clienteActual == null) {
            JOptionPane.showMessageDialog(rootPane,
                    "Por favor seleccione un cliente",
                    "Atención",
                    JOptionPane.ERROR_MESSAGE);
            selectCliente();
        } else if (jTableFactura.getModel().getRowCount() < 1) {
            JOptionPane.showMessageDialog(rootPane,
                    "Por favor seleccione al menos un producto",
                    "Atención",
                    JOptionPane.ERROR_MESSAGE);
            addProducto();
        } else {
            if (frmfacturas == null) {
                frmfacturas = new frmFacturas();
            }
            Factura factura
                    = new Factura(
                            frmfacturas.getFacturas().getFacturas().size() + 1,
                            clienteActual,
                            new Date(),
                            Productos.getInventario());
            frmfacturas.addFactura(factura);
            clear();
        }
    }//GEN-LAST:event_jBtnFacturarActionPerformed


    private void jMenuItemImprimirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemImprimirActionPerformed
        if (frmfacturas == null) {
            frmfacturas = new frmFacturas();
            frmfacturas.setVisible(true);
        } else if (!frmfacturas.isVisible()) {
            frmfacturas.setVisible(true);
        }
        frmfacturas.toFront();
    }//GEN-LAST:event_jMenuItemImprimirActionPerformed

    public static void setclienteActual(Cliente cliente) {
        frmFactura.clienteActual = cliente;
        setClienteActualLabel();
    }

    public static void setproductoActual(Producto producto) {
        Productos.addProducto(producto);
        setTotal();
        updateJTable();
    }

    private static void updateJTable() {
        DefaultTableModel model = (DefaultTableModel) jTableFactura.getModel();
        model.getDataVector().removeAllElements();
        model.fireTableDataChanged();
        for (int i = 0; i < Productos.getInventario().size(); i++) {
            model.addRow(new Object[]{Productos.getInventario().get(i).getId(),
                Productos.getInventario().get(i).getDescripcion(),
                Productos.getInventario().get(i).getValor(),
                Productos.getInventario().get(i).getCantidad()});
        }
    }

    private static void setClienteActualLabel() {
        jLabelCedValue.setText(clienteActual.getCedula());
        jLabelNomValue.
                setText(clienteActual.getNombre() + " " + clienteActual.getApellido());
    }

    private static void setTotal() {
        long total = 0;
        for (Producto producto : Productos.getInventario()) {
            total += producto.getCantidad() * producto.getValor();
        }
        jLabelTotalValue.setText(String.valueOf(total));
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Windows look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */

        try {
            String FeelAndLook = "GTK+";
            if (System.getProperty("os.name").contains("Windows")) {
                FeelAndLook = "Windows";
            }
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if (FeelAndLook.equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(frmFactura.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(() -> {
            new frmFactura().setVisible(true);
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jBtnAgregarProducto;
    private javax.swing.JButton jBtnEdit;
    private javax.swing.JButton jBtnFacturar;
    private javax.swing.JButton jBtnQuitarProducto;
    private javax.swing.JButton jBtnSeleccionarCliente;
    private javax.swing.JLabel jLabelCedCliente;
    private static javax.swing.JLabel jLabelCedValue;
    private static javax.swing.JLabel jLabelNomValue;
    private javax.swing.JLabel jLabelNombreCliente;
    private javax.swing.JLabel jLabelProductos;
    private javax.swing.JLabel jLabelTotal;
    private static javax.swing.JLabel jLabelTotalValue;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItemImprimir;
    private javax.swing.JScrollPane jScrollPane1;
    private static javax.swing.JTable jTableFactura;
    // End of variables declaration//GEN-END:variables
}
